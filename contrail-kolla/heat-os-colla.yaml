heat_template_version: '2017-02-24'
parameters:
  control_flavor:
    type: string
    default: os_ha_ctl
  contrail_flavor:
    type: string
    default: oc_aio_medium
  compute_flavor:
    type: string
    default: os_ha_ctl
  image:
    type: string
    default: ubuntu-16-04-amd64-cloudimg
  availability_zone:
    type: string
    default: mcp-support
  public_net:
    type: string
    default: public
  networks:
    type: json
    default:
      first_network:
        device: ens3
        cidr: 192.168.0.0/24
        hosts:
          control:
            name: control
            ip: 192.168.0.10
          contrail:
            name: contrail
            ip: 192.168.0.11
          compute1:
            name: compute1
            ip: 192.168.0.12
          compute2:
            name: compute2
            ip: 192.168.0.13
      second_network:
        device: ens4
        cidr: 192.168.100.0/24
        hosts:
          control:
            name: control
            ip: 192.168.100.10
          contrail:
            name: contrail
            ip: 192.168.100.11
          compute1:
            name: compute1
            ip: 192.168.100.12
          compute2:
            name: compute2
            ip: 192.168.100.13
      docker_bridge: 172.19.0.1/24
outputs:
  privtate_key:
    value:
      get_attr: [keypair, private_key]
  control_floating_ip:
    value:
      get_attr: [control_floating_ip, floating_ip_address]
resources:
  cloud_config:
    properties:
      cloud_config:
        disable_root: 0
        package_upgrade: true
        runcmd:
        - str_replace: 
            params:
              control_hostname:   { get_param: [ networks, first_network , hosts, control, name]}
              contrail_hostname:  { get_param: [ networks, first_network , hosts, contrail, name]}
              compute1_hostname:  { get_param: [ networks, first_network , hosts, compute1, name]}
              compute2_hostname:  { get_param: [ networks, first_network , hosts, compute2, name]}
              contrail_device: { get_param: [ networks, first_network , device]}
              control_ip:  { get_param: [ networks, first_network , hosts, control, ip]}
              contrail_ip: { get_param: [ networks, first_network , hosts, contrail, ip]}
              compute1_ip: { get_param: [ networks, first_network , hosts, compute1, ip]}
              compute2_ip: { get_param: [ networks, first_network , hosts, compute2, ip]}
              docker_bridge_ip: { get_param: [ networks, docker_bridge ]}
              external_device: { get_param: [ networks, second_network, device]}
            template: | 
              set -x
              echo "control_ip  control_hostname" >> /etc/hosts
              echo "contrail_ip contrail_hostname" >> /etc/hosts
              echo "compute1_ip compute1_hostname" >> /etc/hosts
              echo "compute2_ip compute2_hostname" >> /etc/hosts
              ssh-keyscan control_hostname >> /root/.ssh/known_hosts
              ssh-keyscan contrail_hostname >> /root/.ssh/known_hosts
              ssh-keyscan compute1_hostname >> /root/.ssh/known_hosts
              ssh-keyscan compute2_hostname >> /root/.ssh/known_hosts
              curl -sSL https://get.docker.io | bash
              python -c 'import json; obj={}; obj["bip"]="docker_bridge_ip"; print(json.dumps(obj))' > /etc/docker/daemon.json
              systemctl restart docker
              test $HOSTNAME=="control_hostname"  && { 
                apt-get install -y git python-pip sshpass python-oslo-config python-dev libffi-dev gcc libssl-dev qemu-kvm
                pip install -U pip 
                pip install -U ansible
                pip install  pyOpenSSL==16.2.0 
                git clone https://github.com/gokulpch/OpenContrail-Kolla
                cp -p OpenContrail-Kolla/kolla-ansible/etc/kolla/globals.yml OpenContrail-Kolla/kolla-ansible/etc/kolla/globals.yml.org
                sed -i 's/network_interface: "ens3"/network_interface: "contrail_device"/g' OpenContrail-Kolla/kolla-ansible/etc/kolla/globals.yml
                sed -i 's/neutron_external_interface: "ens4"/network_external_interface: "contrail_device"/g' OpenContrail-Kolla/kolla-ansible/etc/kolla/globals.yml
                sed -i 's/kolla_internal_vip_address: "10.87.1.49"/kolla_internal_vip_address: "control_ip"/g' OpenContrail-Kolla/kolla-ansible/etc/kolla/globals.yml
                sed -i 's/contrail_api_interface_address: "10.87.1.49"/contrail_api_interface_address: "contrail_ip"/g' OpenContrail-Kolla/kolla-ansible/etc/kolla/globals.yml
                diff OpenContrail-Kolla/kolla-ansible/etc/kolla/globals.yml OpenContrail-Kolla/kolla-ansible/etc/kolla/globals.yml.org
                cp -p OpenContrail-Kolla/kolla-ansible/ansible/inventory/multinode OpenContrail-Kolla/kolla-ansible/ansible/inventory/multinode.org
                sed -i 's/1ocata/control_hostname/g' OpenContrail-Kolla/kolla-ansible/ansible/inventory/multinode
                sed -i 's/ocata1/control_hostname/g' OpenContrail-Kolla/kolla-ansible/ansible/inventory/multinode
                sed -i 's/ocata2/compute1_hostname\ncompute2_hostname/g' OpenContrail-Kolla/kolla-ansible/ansible/inventory/multinode
                diff OpenContrail-Kolla/kolla-ansible/ansible/inventory/multinode OpenContrail-Kolla/kolla-ansible/ansible/inventory/multinode.org
                cp -p OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/hosts OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/hosts.org
                sed -i '/^.contrail-controllers.$/{n;s/.*/contrail_ip/g}' OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/hosts
                sed -i '/^.contrail-analyticsdb.$/{n;s/.*/contrail_ip/g}' OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/hosts
                sed -i '/^.contrail-analytics.$/{n;s/.*/contrail_ip/g}' OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/hosts
                sed -i '/^.contrail-compute.$/{n;s/.*/compute1_ip\ncompute2_ip/g}' OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/hosts
                sed -i '/^.openstack-controllers.$/{n;s/.*/control_ip/g}' OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/hosts
                diff OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/hosts OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/hosts.org
                cp -p OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/group_vars/all.yml OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/group_vars/all.yml.org
                sed -i 's/global_config: { external_rabbitmq_servers: 10.87.1.49 }/global_config: { external_rabbitmq_servers: control_ip }/g' OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/group_vars/all.yml
                sed -i 's/keystone_config: {ip: 10.87.1.49, admin_password: contrail1, auth_protocol: http}/keystone_config: {ip: control_ip, admin_password: contrail1, auth_protocol: http}/g' OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/group_vars/all.yml
                sed -i 's/vrouter_physical_interface: ens3/vrouter_physical_interface: contrail_device/g' OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/group_vars/all.yml
                diff OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/group_vars/all.yml OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/group_vars/all.yml.org
              }
        write_files:
        - path: /root/.ssh/id_rsa
          permissions: 0600
          content:
            get_attr: [keypair, private_key]
        - path: /root/.ssh/authorized_keys
          permissions: 0600
          content:
            get_attr: [keypair, public_key]
    type: OS::Heat::CloudConfig
  compute1:
    properties:
      availability_zone: { get_param: availability_zone}
      flavor: { get_param: compute_flavor}
      image: { get_param: image}
      key_name: {get_resource: keypair}
      name: { get_param: [ networks, first_network , hosts, compute1, name]}
      networks:
      - fixed_ip: { get_param: [ networks, first_network , hosts, compute1, ip]}
        network: {get_resource: deploy_net}
      - fixed_ip: { get_param: [ networks, second_network , hosts, compute1, ip]}
        network: {get_resource: neutron_net}
      security_groups:
      - {get_resource: security_group}
      user_data: {get_resource: cloud_config}
      user_data_format: RAW
    type: OS::Nova::Server
  compute2:
    properties:
      availability_zone: { get_param: availability_zone}
      flavor: { get_param: compute_flavor}
      image: { get_param: image}
      key_name: {get_resource: keypair}
      name: { get_param: [ networks, first_network , hosts, compute2, name]}
      networks:
      - fixed_ip: { get_param: [ networks, first_network , hosts, compute2, ip]}
        network: {get_resource: deploy_net}
      - fixed_ip: { get_param: [ networks, second_network , hosts, compute2, ip]}
        network: {get_resource: neutron_net}
      security_groups:
      - {get_resource: security_group}
      user_data: {get_resource: cloud_config}
      user_data_format: RAW
    type: OS::Nova::Server
  contrail:
    properties:
      availability_zone: { get_param: availability_zone}
      flavor:  { get_param: contrail_flavor}
      image: { get_param: image}
      key_name: {get_resource: keypair}
      name: { get_param: [ networks, first_network , hosts, contrail, name]}
      networks:
      - fixed_ip: { get_param: [ networks, first_network , hosts, contrail, ip]}
        network: {get_resource: deploy_net}
      - fixed_ip: { get_param: [ networks, second_network , hosts, contrail, ip]}
        network: {get_resource: neutron_net}
      security_groups:
      - {get_resource: security_group}
      user_data: {get_resource: cloud_config}
      user_data_format: RAW
    type: OS::Nova::Server
  control:
    properties:
      availability_zone: { get_param: availability_zone}
      flavor: { get_param: control_flavor}
      image: { get_param: image}
      key_name: {get_resource: keypair}
      name: { get_param: [ networks, first_network , hosts, control, name]}
      networks:
      - fixed_ip: { get_param: [ networks, first_network , hosts, control, ip]}
        network: {get_resource: deploy_net}
      - fixed_ip: { get_param: [ networks, second_network , hosts, control, ip]}
        network: {get_resource: neutron_net}
      security_groups:
      - {get_resource: security_group}
      user_data: {get_resource: cloud_config}
      user_data_format: RAW
    type: OS::Nova::Server
  deploy_net:
    properties: {name: deploy_net}
    type: OS::Neutron::Net
  deploy_subnet:
    properties:
      cidr: { get_param: [ networks, first_network , cidr]}
      network: {get_resource: deploy_net}
      dns_nameservers: [ 8.8.8.8, 8.8.8.4 ]
    type: OS::Neutron::Subnet
  ext_router:
    properties:
      external_gateway_info: {network: { get_param: public_net }}
    type: OS::Neutron::Router
  ext_router_assignment:
    properties:
      router: {get_resource: ext_router}
      subnet: {get_resource: deploy_subnet}
    type: OS::Neutron::RouterInterface
  control_floating_ip:
    properties: {floating_network: { get_param: public_net }}
    type: OS::Neutron::FloatingIP
  control_floating_ip_asociate:
    properties:
      floatingip_id: {get_resource: control_floating_ip}
      port_id:
        get_attr:
        - control
        - addresses
        - {get_resource: deploy_net}
        - 0
        - port
    type: OS::Neutron::FloatingIPAssociation
  contrail_floating_ip:
    properties: {floating_network: { get_param: public_net }}
    type: OS::Neutron::FloatingIP
  contrail_floating_ip_asociate:
    properties:
      floatingip_id: {get_resource: contrail_floating_ip}
      port_id:
        get_attr:
        - contrail
        - addresses
        - {get_resource: deploy_net}
        - 0
        - port
    type: OS::Neutron::FloatingIPAssociation
  compute1_floating_ip:
    properties: {floating_network: { get_param: public_net }}
    type: OS::Neutron::FloatingIP
  compute1_floating_ip_asociate:
    properties:
      floatingip_id: {get_resource: compute1_floating_ip}
      port_id:
        get_attr:
        - compute1
        - addresses
        - {get_resource: deploy_net}
        - 0
        - port
    type: OS::Neutron::FloatingIPAssociation
  compute2_floating_ip:
    properties: {floating_network: { get_param: public_net }}
    type: OS::Neutron::FloatingIP
  compute2_floating_ip_asociate:
    properties:
      floatingip_id: {get_resource: compute2_floating_ip}
      port_id:
        get_attr:
        - compute2
        - addresses
        - {get_resource: deploy_net}
        - 0
        - port
    type: OS::Neutron::FloatingIPAssociation
  keyname_random: {type: 'OS::Heat::RandomString'}
  keypair:
    properties:
      name:
        get_attr: [keyname_random, value]
      save_private_key: true
    type: OS::Nova::KeyPair
  neutron_net:
    properties: {name: neutron_net}
    type: OS::Neutron::Net
  neutron_subnet:
    properties:
      cidr: { get_param: [ networks, second_network, cidr ]}
      gateway_ip: 0.0.0.0
      network: {get_resource: neutron_net}
    type: OS::Neutron::Subnet
  secgroup_random: {type: 'OS::Heat::RandomString'}
  security_group:
    properties:
      name:
        get_attr: [secgroup_random, value]
      rules:
      - {port_range_max: 65535, port_range_min: 0, protocol: tcp, remote_ip_prefix: 0.0.0.0/0}
      - {port_range_max: 65535, port_range_min: 0, protocol: udp, remote_ip_prefix: 0.0.0.0/0}
      - {protocol: icmp, remote_ip_prefix: 0.0.0.0/0}
    type: OS::Neutron::SecurityGroup

