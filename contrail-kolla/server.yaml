heat_template_version: '2017-02-24'
parameters:
  stackname:
    type: string
  name:
    type: string
  flavor:
    type: string
  image:
    type: string
  availability_zone:
    type: string
  public_net:
    type: string
  key_name:
    type: string
  firstnet:
    type: string
  firstnet_ip:
    type: string
  secondnet:
    type: string
  secondnet_ip:
    type: string
  networks:
    type: json
  public_key:
    type: string
  private_key:
    type: string
  compute_count:
    type: string
outputs:
  floating_ip_address:
    value:
      get_attr: [floating_ip, floating_ip_address]
resources:
  server:
    type: OS::Nova::Server
    properties:
      availability_zone: { get_param: availability_zone}
      flavor: { get_param: flavor}
      image: { get_param: image}
      key_name: {get_param: key_name}
      name: 
        str_replace:
          template: stacknamename
          params:
            stackname: { get_param: stackname }
            name: { get_param: name }
      networks: 
      - port: { get_resource: firstnet_port }
      - port: { get_resource: secondnet_port }
      user_data: {get_resource: cloud_config}
      user_data_format: RAW
  firstnet_port:
    properties:
      network: {get_param: firstnet}
      fixed_ips: [ {  "ip_address": { get_param: firstnet_ip } } ]
      security_groups: 
      - { get_resource: security_group}      
    type: OS::Neutron::Port
  secondnet_port:
    properties:
      network: {get_param: secondnet}
      fixed_ips: [ {  "ip_address": { get_param: secondnet_ip } } ]
    type: OS::Neutron::Port
  floating_ip:
    properties: {floating_network: { get_param: public_net }}
    type: OS::Neutron::FloatingIP
  floating_ip_asociate:
    properties:
      floatingip_id: {get_resource: floating_ip}
      port_id: { get_resource: firstnet_port }
    type: OS::Neutron::FloatingIPAssociation
  security_group_random:
    type: OS::Heat::RandomString
  security_group:
    properties:
      name:
        get_attr: [security_group_random, value]
      rules:
      - {port_range_max: 65535, port_range_min: 0, protocol: tcp, remote_ip_prefix: 0.0.0.0/0}
      - {port_range_max: 65535, port_range_min: 0, protocol: udp, remote_ip_prefix: 0.0.0.0/0}
      - {protocol: icmp, remote_ip_prefix: 0.0.0.0/0}
    type: OS::Neutron::SecurityGroup
  cloud_config:
    properties:
      cloud_config:
        disable_root: 0
        package_upgrade: true
        runcmd:
        - str_replace:
            params:
              stackname: { get_param: stackname }
              servercount: { get_param: compute_count }
              control_hostname:   { get_param: [ networks, first_network , hosts, control, name]}
              contrail_hostname:  { get_param: [ networks, first_network , hosts, contrail, name]}
              compute_hostname:  { get_param: [ networks, first_network , hosts, compute, name]}
              contrail_device: { get_param: [ networks, first_network , device]}
              control_ip:  { get_param: [ networks, first_network , hosts, control, ip]}
              contrail_ip: { get_param: [ networks, first_network , hosts, contrail, ip]}
              compute_ip: { get_param: [ networks, first_network , hosts, compute, ipprefix]}
              docker_bridge_ip: { get_param: [ networks, docker_bridge ]}
              external_device: { get_param: [ networks, second_network, device]}
              wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
            template: |
              set -x
              echo "control_ip  stacknamecontrol_hostname" >> /etc/hosts
              echo "contrail_ip stacknamecontrail_hostname" >> /etc/hosts
              ssh-keyscan localhost >> /root/.ssh/known_hosts
              ssh-keyscan stacknamecontrol_hostname >> /root/.ssh/known_hosts
              ssh-keyscan stacknamecontrail_hostname >> /root/.ssh/known_hosts
              ssh-keyscan 127.0.0.1 >> /root/.ssh/known_hosts
              ssh-keyscan control_ip >> /root/.ssh/known_hosts
              ssh-keyscan contrail_ip >> /root/.ssh/known_hosts
              i=0
              computehosts_list=''
              computeip_list=''
              while true
              do
                 if [ $i -ge servercount ]
                 then
                   break
                 fi
                 echo "compute_ip$i stacknamecompute_hostname$i" >> /etc/hosts
                 ssh-keyscan stacknamecompute_hostname$i >> /root/.ssh/known_hosts
                 ssh-keyscan compute_ip$i >> /root/.ssh/known_hosts
                 computehosts_list="${computehosts_list}stacknamecompute_hostname$i\n"
                 computeip_list="${computeip_list}compute_ip$i\n"
                 i=$((i+1))
              done
              apt-get install -y python docker docker.io
              python -c 'import json; obj={}; obj["bip"]="docker_bridge_ip"; print(json.dumps(obj))' > /etc/docker/daemon.json
              systemctl restart docker
              if [ `hostname` = "stacknamecontrol_hostname" ]
              then
                apt-get install -y git python-pip sshpass python-oslo-config python-dev libffi-dev gcc libssl-dev qemu-kvm
                pip install -U pip
                pip install -U ansible
                pip install python-openstackclient
                pip install  pyOpenSSL==16.2.0
                git clone https://github.com/gokulpch/OpenContrail-Kolla
                cp -p OpenContrail-Kolla/kolla-ansible/etc/kolla/globals.yml OpenContrail-Kolla/kolla-ansible/etc/kolla/globals.yml.org
                sed -i 's/network_interface: "ens3"/network_interface: "contrail_device"/g' OpenContrail-Kolla/kolla-ansible/etc/kolla/globals.yml
                sed -i 's/neutron_external_interface: "ens4"/network_external_interface: "contrail_device"/g' OpenContrail-Kolla/kolla-ansible/etc/kolla/globals.yml
                sed -i 's/kolla_internal_vip_address: "10.87.1.49"/kolla_internal_vip_address: "control_ip"/g' OpenContrail-Kolla/kolla-ansible/etc/kolla/globals.yml
                sed -i 's/contrail_api_interface_address: "10.87.1.49"/contrail_api_interface_address: "contrail_ip"/g' OpenContrail-Kolla/kolla-ansible/etc/kolla/globals.yml
                diff OpenContrail-Kolla/kolla-ansible/etc/kolla/globals.yml OpenContrail-Kolla/kolla-ansible/etc/kolla/globals.yml.org
                cp -p OpenContrail-Kolla/kolla-ansible/ansible/inventory/multinode OpenContrail-Kolla/kolla-ansible/ansible/inventory/multinode.org
                sed -i 's/1ocata/stacknamecontrol_hostname/g' OpenContrail-Kolla/kolla-ansible/ansible/inventory/multinode
                sed -i 's/ocata1/stacknamecontrol_hostname/g' OpenContrail-Kolla/kolla-ansible/ansible/inventory/multinode
                sed -i 's/ocata2/'"${computehosts_list}"'/g' OpenContrail-Kolla/kolla-ansible/ansible/inventory/multinode
                diff OpenContrail-Kolla/kolla-ansible/ansible/inventory/multinode OpenContrail-Kolla/kolla-ansible/ansible/inventory/multinode.org
                cp -p OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/hosts OpenContrail-Kolla/contrail-ansible/playbooks/inventory/hosts.org
                sed -i '/^.contrail-controllers.$/{n;s/.*/contrail_ip/g}' OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/hosts
                sed -i '/^.contrail-analyticsdb.$/{n;s/.*/contrail_ip/g}' OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/hosts
                sed -i '/^.contrail-analytics.$/{n;s/.*/contrail_ip/g}' OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/hosts
                sed -i '/^.contrail-compute.$/{n;s/.*/'"${computeip_list}"'/g}' OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/hosts
                sed -i '/^.openstack-controllers.$/{n;s/.*/control_ip/g}' OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/hosts
                diff OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/hosts OpenContrail-Kolla/contrail-ansible/playbooks/inventory/hosts.org
                cp -p OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/group_vars/all.yml OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/group_vars/all.yml.org
                sed -i 's/global_config: { external_rabbitmq_servers: 10.87.1.49 }/global_config: { external_rabbitmq_servers: control_ip }/g' OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/group_vars/all.yml
                sed -i 's/keystone_config: {ip: 10.87.1.49, admin_password: contrail1, auth_protocol: http}/keystone_config: {ip: control_ip, admin_password: contrail1, auth_protocol: http}/g' OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/group_vars/all.yml
                sed -i 's/vrouter_physical_interface: ens3/vrouter_physical_interface: contrail_device/g' OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/group_vars/all.yml
                diff OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/group_vars/all.yml OpenContrail-Kolla/contrail-ansible/playbooks/inventory/my-inventory/group_vars/all.yml.org
                echo 'export OS_USERNAME=admin
                export OS_PASSWORD=contrail1
                export OS_PROJECT_NAME=admin
                export OS_USER_DOMAIN_NAME=Default
                export OS_PROJECT_DOMAIN_NAME=Default
                export OS_AUTH_URL=http://control_ip:35357/v3
                export OS_IDENTITY_API_VERSION=3
                export OS_IMAGE_API_VERSION=2' > /root/openstackrc
                git clone https://github.com/openstack/kolla-ansible
                cp -rfp /OpenContrail-Kolla/kolla-ansible/ansible/roles/neutron/handlers/main.yml /kolla-ansible/ansible/roles/neutron/handlers/main.yml
                cp -rfp /OpenContrail-Kolla/kolla-ansible/ansible/roles/neutron/tasks/config.yml /kolla-ansible/ansible/roles/neutron/tasks/config.yml
                cp -rfp /OpenContrail-Kolla/kolla-ansible/ansible/roles/neutron/templates/* /kolla-ansible/ansible/roles/neutron/templates/
                cp -rfp /OpenContrail-Kolla/kolla-ansible/ansible/group_vars/* /kolla-ansible/ansible/group_vars/
                cp -rfp /OpenContrail-Kolla/kolla-ansible/ansible/inventory/* /kolla-ansible/ansible/inventory/
                cp -rfp /OpenContrail-Kolla/kolla-ansible/etc/kolla/globals.yml /kolla-ansible/etc/kolla/globals.yml
                cp -rfp /OpenContrail-Kolla/kolla-ansible/etc/kolla/passwords.yml /kolla-ansible/etc/kolla/passwords.yml
              fi
              wc_notify --data-binary '{"status": "SUCCESS"}'
        write_files:
        - path: /root/.ssh/id_rsa
          permissions: 0600
          content:
            get_param: private_key
        - path: /root/.ssh/authorized_keys
          permissions: 0600
          content:
            get_param: public_key
    type: OS::Heat::CloudConfig
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: wait_handle}
      timeout: 300
  wait_handle:
    type: OS::Heat::WaitConditionHandle

