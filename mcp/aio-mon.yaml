heat_template_version: '2017-02-24'
parameters:
  cfg_flavor:
    type: string
    default: m1.small
  aio_flavor:
    type: string
    default: m1.large
  mon_flavor:
    type: string
    default: m1.large
  cid_flavor:
    type: string
    default: m1.large
  image:
    type: string
    default: ubuntu-16-04-amd64-cloudimg
  availability_zone:
    type: string
    default: mcp-support
  public_net:
    type: string
    default: public
  dns_servers:
    type: comma_delimited_list
    label: dns_servers
    default: 172.18.208.44
  networks:
    type: json
    default:
      deploy_net:
        device: ens3
        cidr: 192.168.0.0/24
        hosts:
          cfg:
            name: cfg
            ip: 192.168.0.10
          aio:
            name: mon
            ip: 192.168.0.11
          mon:
            name: aio
            ip: 192.168.0.12
          cid:
            name: aio
            ip: 192.168.0.13
outputs:
  privtate_key:
    value:
      get_attr: [keypair, private_key]
  cfg_floating_ip:
    value:
      get_attr: [cfg, floating_ip_address]
resources:
  cfg:
    depends_on:
    - deploy_subnet
    properties:
      stackname: {get_param: 'OS::stack_name' }
      availability_zone: { get_param: availability_zone}
      flavor: { get_param: cfg_flavor}
      image: { get_param: image}
      key_name: {get_resource: keypair}
      name: { get_param: [ networks, deploy_net , hosts, cfg, name]}
      deploy_netip: { get_param: [ networks, deploy_net , hosts, cfg, ip]}
      deploy_net: {get_resource: deploy_net}
      public_net: { get_param: public_net }
      public_key: { get_attr: [ keypair, public_key ]}
      private_key: { get_attr: [ keypair, private_key ]}
      networks: { get_param: networks }
    type: server.yaml
  aio:
    depends_on:
    - deploy_subnet
    properties:
      stackname: {get_param: 'OS::stack_name' }
      availability_zone: { get_param: availability_zone}
      flavor: { get_param: aio_flavor}
      image: { get_param: image}
      key_name: {get_resource: keypair}
      name: { get_param: [ networks, deploy_net , hosts, aio, name]}
      deploy_netip: { get_param: [ networks, deploy_net , hosts, aio, ip]}
      deploy_net: {get_resource: deploy_net}
      public_net: { get_param: public_net }
      public_key: { get_attr: [ keypair, public_key ]}
      private_key: { get_attr: [ keypair, private_key ]}
      networks: { get_param: networks }
    type: server.yaml
  mon:
    depends_on:
    - deploy_subnet
    properties:
      stackname: {get_param: 'OS::stack_name' }
      availability_zone: { get_param: availability_zone}
      flavor: { get_param: mon_flavor}
      image: { get_param: image}
      key_name: {get_resource: keypair}
      name: { get_param: [ networks, deploy_net , hosts, mon, name]}
      deploy_netip: { get_param: [ networks, deploy_net , hosts, mon, ip]}
      deploy_net: {get_resource: deploy_net}
      public_net: { get_param: public_net }
      public_key: { get_attr: [ keypair, public_key ]}
      private_key: { get_attr: [ keypair, private_key ]}
      networks: { get_param: networks }
    type: server.yaml
  cid:
    depends_on:
    - deploy_subnet
    properties:
      stackname: {get_param: 'OS::stack_name' }
      availability_zone: { get_param: availability_zone}
      flavor: { get_param: mon_flavor}
      image: { get_param: image}
      key_name: {get_resource: keypair}
      name: { get_param: [ networks, deploy_net , hosts, mon, name]}
      deploy_netip: { get_param: [ networks, deploy_net , hosts, mon, ip]}
      deploy_net: {get_resource: deploy_net}
      public_net: { get_param: public_net }
      public_key: { get_attr: [ keypair, public_key ]}
      private_key: { get_attr: [ keypair, private_key ]}
      networks: { get_param: networks }
    type: server.yaml
         
  deploy_net:
    properties: {name: deploy_net}
    type: OS::Neutron::Net
  deploy_subnet:
    properties:
      cidr: { get_param: [ networks, deploy_net , cidr]}
      network: {get_resource: deploy_net}
      dns_nameservers: 
        repeat:
          for_each:
            dns_server: { get_param: dns_servers }
          template:
            dns_server
    type: OS::Neutron::Subnet
  ext_router:
    properties:
      external_gateway_info: {network: { get_param: public_net }}
    type: OS::Neutron::Router
  ext_router_assignment:
    properties:
      router: {get_resource: ext_router}
      subnet: {get_resource: deploy_subnet}
    type: OS::Neutron::RouterInterface
  keyname_random: {type: 'OS::Heat::RandomString'}
  keypair:
    properties:
      name:
        get_attr: [keyname_random, value]
      save_private_key: true
    type: OS::Nova::KeyPair

