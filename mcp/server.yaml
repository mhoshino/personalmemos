heat_template_version: '2017-02-24'
parameters:
  stackname:
    type: string
  name:
    type: string
  flavor:
    type: string
  image:
    type: string
  availability_zone:
    type: string
  public_net:
    type: string
  key_name:
    type: string
  deploy_net:
    type: string
  deploy_netip:
    type: string
  networks:
    type: json
  public_key:
    type: string
  private_key:
    type: string
  timeout:
    type: string
    default: 3600
outputs:
  floating_ip_address:
    value:
      get_attr: [floating_ip, floating_ip_address]
  server_id:
    value:
      get_resource: server
resources:
  server:
    type: OS::Nova::Server
    properties:
      availability_zone: { get_param: availability_zone}
      flavor: { get_param: flavor}
      image: { get_param: image}
      key_name: {get_param: key_name}
      name: 
        str_replace:
          template: stacknamename
          params:
            stackname: { get_param: stackname }
            name: { get_param: name }
      networks: 
      - port: { get_resource: deploy_netport }
      user_data: {get_resource: cloud_config}
      user_data_format: RAW
  deploy_netport:
    properties:
      network: {get_param: deploy_net}
      fixed_ips: [ {  "ip_address": { get_param: deploy_netip } } ]
      security_groups: 
      - { get_resource: security_group}      
    type: OS::Neutron::Port
  floating_ip:
    properties: {floating_network: { get_param: public_net }}
    type: OS::Neutron::FloatingIP
  floating_ip_asociate:
    properties:
      floatingip_id: {get_resource: floating_ip}
      port_id: { get_resource: deploy_netport }
    type: OS::Neutron::FloatingIPAssociation
  security_group_random:
    type: OS::Heat::RandomString
  security_group:
    properties:
      name:
        get_attr: [security_group_random, value]
      rules:
      - {port_range_max: 65535, port_range_min: 0, protocol: tcp, remote_ip_prefix: 0.0.0.0/0}
      - {port_range_max: 65535, port_range_min: 0, protocol: udp, remote_ip_prefix: 0.0.0.0/0}
      - {protocol: icmp, remote_ip_prefix: 0.0.0.0/0}
    type: OS::Neutron::SecurityGroup
  cloud_config:
    properties:
      parts:
      - config: { get_resource: initial_config }
      - config: { get_resource: common_config }
      - config: { get_resource: complete_config }
    type: OS::Heat::MultipartMime
  initial_config:
    properties:
      cloud_config:
        disable_root: 0
        package_upgrade: true
        run_cmd : []
        write_files:
        - path: /root/.ssh/id_rsa
          permissions: 0600
          content:
            get_param: private_key
        - path: /root/.ssh/authorized_keys
          permissions: 0600
          content:
            get_param: public_key
    type: OS::Heat::CloudConfig
  common_config:
    properties:
      config:
        str_replace:
          params:
            stackname: { get_param: stackname }
            cfg_hostname:   { get_param: [ networks, deploy_net , hosts, cfg, name]}
            cfg_ip:  { get_param: [ networks, deploy_net , hosts, cfg, ip]}
            docker_bridge_ip: { get_param: [ networks, docker_bridge ]}
          template: 
            get_file: common.sh 
    type: OS::Heat::SoftwareConfig
  complete_config:
    properties:
      config:
        str_replace:
          params:
            wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
          template: | 
            #!/bin/sh
            wc_notify --data-binary '{"status": "SUCCESS"}'
    type: OS::Heat::SoftwareConfig
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: wait_handle}
      timeout: { get_param: timeout }
  wait_handle:
    type: OS::Heat::WaitConditionHandle
